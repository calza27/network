---
AWSTemplateFormatVersion: 2010-09-09
Description: pricing network resources

Parameters:
  cidr:
    Type: String
    Description: VPC's CIDR

  appCidr:
    Description: app VPC cidr
    Type: String

  appSubnetACidr:
    Description: App subnet A
    Type: String

  appSubnetBCidr:
    Description: App subnet B
    Type: String

  appSubnetCCidr:
    Description: App subnet C
    Type: String

Resources:
  vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref cidr
      InstanceTenancy: default
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  routeTableAppA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-app-a'

  routeTableAppB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-app-b'

  routeTableAppC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-app-c'

  appSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      VpcId: !Ref vpc
      CidrBlock: !Ref appSubnetACidr
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-app-a'

  routeAppSubnetA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref appSubnetA
      RouteTableId: !Ref routeTableAppA

  appSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      VpcId: !Ref vpc
      CidrBlock: !Ref appSubnetBCidr
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-app-b'

  routeAppSubnetB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref appSubnetB
      RouteTableId: !Ref routeTableAppB

  appSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [2, !GetAZs '']
      VpcId: !Ref vpc
      CidrBlock: !Ref appSubnetCCidr
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-app-c'

  routeAppSubnetC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref appSubnetC
      RouteTableId: !Ref routeTableAppC

  naclApp:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref vpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-app'


  naclAppIngressFromInetEph:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref naclApp
      RuleNumber: 900
      Protocol: 6
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535


  naclAppEgressHttps:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref naclApp
      Egress: true
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443

  naclAppEgressToVpcEph:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref naclApp
      RuleNumber: 901
      Protocol: 6
      Egress: true
      RuleAction: allow
      CidrBlock: !Ref cidr
      PortRange:
        From: 1024
        To: 65535

  naclAssocAppA:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref appSubnetA
      NetworkAclId: !Ref naclApp

  naclAssocAppB:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref appSubnetB
      NetworkAclId: !Ref naclApp

  naclAssocAppC:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref appSubnetC
      NetworkAclId: !Ref naclApp

  flowLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 365

  flowLogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: flowlog-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: !GetAtt flowLogGroup.Arn

  flowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt flowLogRole.Arn
      LogGroupName: !Ref flowLogGroup
      ResourceId: !Ref vpc
      ResourceType: VPC
      TrafficType: ALL

  route53ResolverQueryLogConfigAssociation:
    Type: AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation
    Properties:
      ResolverQueryLogConfigId: !Ref route53ResolverQueryLogConfig
      ResourceId: !Ref vpc

  route53ResolverQueryLogConfig:
    Type: AWS::Route53Resolver::ResolverQueryLoggingConfig
    Properties:
      DestinationArn: !GetAtt route53ResolverQueryLogGroup.Arn

  route53ResolverQueryLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 365

  paramVpcID:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /network/vpc-id
      Type: String
      Value: !Ref vpc

  paramAppSubnetA:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /network/app-subnet-a
      Type: String
      Value: !Ref appSubnetA

  paramAppSubnetB:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /network/app-subnet-b
      Type: String
      Value: !Ref appSubnetB

  paramAppSubnetC:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /network/app-subnet-c
      Type: String
      Value: !Ref appSubnetC

  paramAppSubnets:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /network/appSubnets
      Type: StringList
      Value: !Join [',', [!Ref appSubnetA, !Ref appSubnetB, !Ref appSubnetC]]

  paramAppCidr:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /network/appCidr
      Type: String
      Value: !Ref appCidr

  dynamoDbVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref vpc
      VpcEndpointType: Interface
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.dynamodb"
      SubnetIds:
        - !Ref appSubnetA
        - !Ref appSubnetB
        - !Ref appSubnetC
      RouteTableIds:
        - !Ref routeTableAppA
        - !Ref routeTableAppB
        - !Ref routeTableAppC
      PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal: "*"
              Action:
                - "dynamodb:*"
              Resource:
                - "*"

  ssmVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref vpc
      VpcEndpointType: Interface
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
      SubnetIds:
        - !Ref appSubnetA
        - !Ref appSubnetB
        - !Ref appSubnetC
      RouteTableIds:
        - !Ref routeTableAppA
        - !Ref routeTableAppB
        - !Ref routeTableAppC
      PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal: "*"
              Action:
                - "ssm:*"
              Resource:
                - "*"
